From 51e021993581d52a4ecdd5f531ec497d18da4058 Mon Sep 17 00:00:00 2001
From: Robert Sturla <robertsturla@outlook.com>
Date: Fri, 22 Aug 2025 10:09:04 +0100
Subject: [PATCH 2/2] chore: move logic into efi.rs

---
 Cargo.toml       |   2 +-
 src/bios.rs      |   1 +
 src/bootupd.rs   |  21 +--------
 src/component.rs |   1 +
 src/efi.rs       | 111 +++++++++++++++++++++++++++--------------------
 5 files changed, 68 insertions(+), 68 deletions(-)

diff --git a/Cargo.toml b/Cargo.toml
index 02b53c2..6e1b162 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -16,7 +16,7 @@ platforms = ["*-unknown-linux-gnu"]
 tier = "2"

 [features]
-default = []
+default = ["systemd-boot"]
 systemd-boot = []

 [[bin]]
diff --git a/src/bios.rs b/src/bios.rs
index 4b34c20..e84537d 100644
--- a/src/bios.rs
+++ b/src/bios.rs
@@ -112,6 +112,7 @@ impl Component for Bios {
         dest_root: &str,
         device: &str,
         _update_firmware: bool,
+        _bootloader: crate::bootupd::Bootloader,
     ) -> Result<InstalledContent> {
         let Some(meta) = get_component_update(src_root, self)? else {
             anyhow::bail!("No update metadata for component {} found", self.name());
diff --git a/src/bootupd.rs b/src/bootupd.rs
index 9ac7167..703edfd 100644
--- a/src/bootupd.rs
+++ b/src/bootupd.rs
@@ -119,7 +119,7 @@ pub(crate) fn install(
             update_firmware = false;
         }
         let meta = component
-            .install(&source_root, dest_root, device, update_firmware)
+            .install(&source_root, dest_root, device, update_firmware, bootloader)
             .with_context(|| format!("installing component {}", component.name()))?;
         log::info!("Installed {} {}", component.name(), meta.meta.version);
         state.installed.insert(component.name().into(), meta);
@@ -153,24 +153,7 @@ pub(crate) fn install(
         }
     }

-    // Configure systemd-boot
-    // #[cfg(feature = "systemd-boot")]
-    if bootloader == Bootloader::SystemdBoot {
-        let efi = crate::efi::Efi::default();
-        log::info!("Installing systemd-boot");
-        // Use dest_root/boot as the root for ESP detection, matching conventions elsewhere
-        let boot_root = Path::new(dest_root).join("boot");
-        let esp_device = crate::blockdev::get_esp_partition(device)?
-            .ok_or_else(|| anyhow!("No ESP device found"))?;
-        let mnt = efi.ensure_mounted_esp(&boot_root, Path::new(&esp_device))?;
-        let esp_dir = openat::Dir::open(&mnt).context("Opening mounted ESP directory")?;
-        crate::systemdbootconfigs::install(&esp_dir)?;
-    } else {
-        anyhow::bail!(
-            "Failed to find mounted ESP for systemd-boot installation in {:?}.",
-            Path::new(dest_root).join("boot")
-        );
-    }
+    // Systemd-boot installation is now handled by the EFI component's install method.

     // Unmount the ESP, etc.
     drop(target_components);
diff --git a/src/component.rs b/src/component.rs
index 5ca32df..37b38c6 100644
--- a/src/component.rs
+++ b/src/component.rs
@@ -55,6 +55,7 @@ pub(crate) trait Component {
         dest_root: &str,
         device: &str,
         update_firmware: bool,
+        bootloader: crate::bootupd::Bootloader,
     ) -> Result<InstalledContent>;

     /// Implementation of `bootupd generate-update-metadata` for a given component.
diff --git a/src/efi.rs b/src/efi.rs
index 41352c5..f59f8fe 100644
--- a/src/efi.rs
+++ b/src/efi.rs
@@ -343,66 +343,81 @@ impl Component for Efi {
         dest_root: &str,
         device: &str,
         update_firmware: bool,
+        bootloader: crate::bootupd::Bootloader,
     ) -> Result<InstalledContent> {
-        let meta = match get_component_update(src_root, self)? {
-            Some(meta) => meta,
-            None => {
-                log::debug!(
-                    "No update metadata for component {} found, continuing (systemd-boot case)",
-                    self.name()
-                );
-                // You may want to return a default InstalledContent or handle this case differently.
-                return Ok(InstalledContent {
+        let esp_path = self.get_mounted_esp(Path::new(dest_root))?.or_else(|| {
+            if device.is_empty() {
+                None
+            } else {
+                let esp_device = blockdev::get_esp_partition(device).ok().flatten()?;
+                self.mount_esp_device(Path::new(dest_root), Path::new(&esp_device))
+                    .ok()
+            }
+        });
+
+        match bootloader {
+            crate::bootupd::Bootloader::SystemdBoot => {
+                log::info!("Installing systemd-boot via bootctl");
+                let esp_dir = openat::Dir::open(esp_path.as_ref().ok_or_else(|| {
+                    anyhow::anyhow!("No ESP mount found for systemd-boot install")
+                })?)
+                .context("Opening mounted ESP directory for systemd-boot")?;
+                crate::systemdbootconfigs::install(&esp_dir)?;
+                Ok(InstalledContent {
                     meta: ContentMetadata {
                         timestamp: chrono::Utc::now(),
                         version: "systemd-boot".to_string(),
                     },
                     filetree: None,
                     adopted_from: None,
-                });
+                })
             }
-        };
-        log::debug!("Found metadata {}", meta.version);
-        let srcdir_name = component_updatedirname(self);
-        let ft = crate::filetree::FileTree::new_from_dir(&src_root.sub_dir(&srcdir_name)?)?;
+            crate::bootupd::Bootloader::Grub | crate::bootupd::Bootloader::_Auto => {
+                let meta = match get_component_update(src_root, self)? {
+                    Some(meta) => meta,
+                    None => {
+                        log::debug!(
+                            "No update metadata for component {} found, continuing (GRUB case)",
+                            self.name()
+                        );
+                        return Ok(InstalledContent {
+                            meta: ContentMetadata {
+                                timestamp: chrono::Utc::now(),
+                                version: "grub".to_string(),
+                            },
+                            filetree: None,
+                            adopted_from: None,
+                        });
+                    }
+                };
+                log::debug!("Found metadata {}", meta.version);
+                let srcdir_name = component_updatedirname(self);
+                let ft = crate::filetree::FileTree::new_from_dir(&src_root.sub_dir(&srcdir_name)?)?;

-        // Let's attempt to use an already mounted ESP at the target
-        // dest_root if one is already mounted there in a known ESP location.
-        let destpath = if let Some(destdir) = self.get_mounted_esp(Path::new(dest_root))? {
-            destdir
-        } else {
-            // Using `blockdev` to find the partition instead of partlabel because
-            // we know the target install toplevel device already.
-            if device.is_empty() {
-                anyhow::bail!("Device value not provided");
-            }
-            let esp_device = blockdev::get_esp_partition(device)?
-                .ok_or_else(|| anyhow::anyhow!("Failed to find ESP device"))?;
-            self.mount_esp_device(Path::new(dest_root), Path::new(&esp_device))?
-        };
+                let destpath = esp_path
+                    .ok_or_else(|| anyhow::anyhow!("No ESP mount found for GRUB install"))?;
+                let destd = &openat::Dir::open(&destpath)
+                    .with_context(|| format!("opening dest dir {}", destpath.display()))?;
+                validate_esp_fstype(destd)?;

-        let destd = &openat::Dir::open(&destpath)
-            .with_context(|| format!("opening dest dir {}", destpath.display()))?;
-        validate_esp_fstype(destd)?;
-
-        // TODO - add some sort of API that allows directly setting the working
-        // directory to a file descriptor.
-        std::process::Command::new("cp")
-            .args(["-rp", "--reflink=auto"])
-            .arg(&srcdir_name)
-            .arg(destpath)
-            .current_dir(format!("/proc/self/fd/{}", src_root.as_raw_fd()))
-            .run()?;
-        if update_firmware {
-            if let Some(vendordir) = self.get_efi_vendor(&src_root)? {
-                self.update_firmware(device, destd, &vendordir)?
+                std::process::Command::new("cp")
+                    .args(["-rp", "--reflink=auto"])
+                    .arg(&srcdir_name)
+                    .arg(&destpath)
+                    .current_dir(format!("/proc/self/fd/{}", src_root.as_raw_fd()))
+                    .run()?;
+                if update_firmware {
+                    if let Some(vendordir) = self.get_efi_vendor(&src_root)? {
+                        self.update_firmware(device, destd, &vendordir)?
+                    }
+                }
+                Ok(InstalledContent {
+                    meta,
+                    filetree: Some(ft),
+                    adopted_from: None,
+                })
             }
         }
-        Ok(InstalledContent {
-            meta,
-            filetree: Some(ft),
-            adopted_from: None,
-        })
     }

     fn run_update(
--
2.50.1
